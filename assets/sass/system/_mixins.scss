// @include background-image(logo, png, 100px 100px, center, no-repeat, true);
@mixin background-image($file, $type, $size, $position, $repeat, $retina: false) {

    background-image: url($image-path + $file + '.' + $type);
    background-position: $position;
    background-repeat: $repeat;
    background-size: $size;

    @if ($retina == true) {
        @include hidpi(1.3) {
            background-image: url($image-path + $file + $image-suffix + '.' + $type);
        }
    }

}

// @include border-radius(5px);
@mixin border-radius($value) {
	-webkit-border-radius: $value;
	border-radius: $value;
	background-clip: padding-box;
}

// @include box-sizing(border-box);
@mixin box-sizing($box-model) {
	-webkit-box-sizing: $box-model;
	-moz-box-sizing: $box-model;
	box-sizing: $box-model;
}

// @include box-shadow(10px, 10px, 5px, 0px, #000, inset);
@mixin box-shadow($x, $y, $b, $s, $color, $inset: null ) {
   -webkit-box-shadow: $inset $x $y $b $s $color;
   -moz-box-shadow: $inset $x $y $b $s $color;
   box-shadow: $inset $x $y $b $s $color;
}

// @include breakpoint(sm) {}
@mixin breakpoint($class) {

    @if $class == xs {
        @media (max-width: $xs) { @content; }
    }

    @else if $class == sm {
        @media (max-width: $sm) { @content; }
    }

    @else if $class == md {
        @media (max-width: $md) { @content; }
    }

    @else if $class == lg {
        @media (max-width: $lg) { @content; }
    }

    @else if $class == xl {
        @media (min-width: $lg + 1) { @content; }

    }

}

// @include clearfix;
@mixin clearfix {
	&::after {
		clear: both;
		content: "";
		display: table;
	}
}

// @include column(2);
@mixin column($value) {
	width: (100/$column-number) * $value + 0%;
}

// @include column-offset(2);
@mixin column-offset($value) {
	margin-left: (100/$column-number) * $value + 0%;
}

// @include flex;
@mixin flex {
    display: -webkit-box;
    display: -webkit-flex;
    display: -moz-box;
    display: -ms-flexbox;
    display: flex
}

// @include hidpi(1.3)
@mixin hidpi($ratio: 1.3) {
    @media only screen and (-webkit-min-device-pixel-ratio: $ratio),
        only screen and (min--moz-device-pixel-ratio: $ratio),
        only screen and (-o-min-device-pixel-ratio: #{$ratio}/1),
        only screen and (min-resolution: round($ratio * 96dpi)),
        only screen and (min-resolution: $ratio * 1dppx) {
            @content;
        }
}

// @include linearGradient(#fff, #999);
@mixin linearGradient($top, $bottom) {
    background: $top;
    background: -moz-linear-gradient(top,  $top 0%, $bottom 100%);
    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,$top), color-stop(100%,$bottom));
    background: -webkit-linear-gradient(top,  $top 0%,$bottom 100%);
    background: -o-linear-gradient(top,  $top 0%,$bottom 100%);
    background: -ms-linear-gradient(top,  $top 0%,$bottom 100%);
    background: linear-gradient(to bottom,  $top 0%,$bottom 100%);
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#ffffff', endColorstr='#000000',GradientType=0 );
}

// @include list-reset;
@mixin list-reset {
	list-style: none;
	margin: 0;
	padding: 0
}

// @include opacity(0.8);
@mixin opacity($value) {
    $IEValue: $value * 100;
    opacity: $value;
    filter: alpha(opacity=$IEValue);
}

// @include position-absolute($top: 10px, $left: 10px);
@mixin position-absolute($top: null, $right: null, $bottom: null, $left: null) {
    bottom: $bottom;
    left: $left;
    position: absolute;
    right: $right;
    top: $top;
}

// @include responsive-img;
@mixin responsive-img {
    display: block;
    height: auto;
    max-width: 100%;
    min-width: 100%;
}

// @include text-truncate;
@mixin text-truncate {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

// @include transform(scale(1,1));
@mixin transform($transforms) {
	-moz-transform: $transforms;
	-o-transform: $transforms;
	-ms-transform: $transforms;
	-webkit-transform: $transforms;
	transform: $transforms;
}

// @include transition(all .2s linear);
@mixin transition($value) {
    -webkit-transition: $value;
    -moz-transition: $value;
    -ms-transition: $value;
    -o-transition: $value;
    transition: $value;
}

// @include vertical-align;
@mixin vertical-align {
    position: relative;
    top: 50%;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
}

// @include reset-vertical-align;
@mixin reset-vertical-align {
    top: auto;
    -webkit-transform: none;
    -ms-transform: none;
    transform: none;
}